class ItcSimpleSlider {
  static PREFIX = "itcss";
  static CLASS_NAME_ITEM = `${ItcSimpleSlider.PREFIX}__item`;
  static CLASS_NAME_ITEM_ACTIVE = `${ItcSimpleSlider.PREFIX}__item_active`;
  static CLASS_NAME_ITEMS = `${ItcSimpleSlider.PREFIX}__items`;
  static CLASS_NAME_INDICATOR = `${ItcSimpleSlider.PREFIX}__indicator`;
  static CLASS_NAME_INDICATOR_ACTIVE = `${ItcSimpleSlider.PREFIX}__indicator_active`;
  static CLASS_NAME_INDICATORS = `${ItcSimpleSlider.PREFIX}__indicators`;
  static CLASS_NAME_CONTROL = `${ItcSimpleSlider.PREFIX}__control`;
  static CLASS_NAME_CONTROL_PREV = `${ItcSimpleSlider.PREFIX}__control_prev`;
  static CLASS_NAME_CONTROL_NEXT = `${ItcSimpleSlider.PREFIX}__control_next`;
  static CLASS_NAME_CONTROL_SHOW = `${ItcSimpleSlider.PREFIX}__control_show`;
  static SELECTOR_ITEMS = `.${ItcSimpleSlider.CLASS_NAME_ITEMS}`;
  static SELECTOR_ITEM = `.${ItcSimpleSlider.CLASS_NAME_ITEM}`;
  static SELECTOR_ITEM_ACTIVE = `.${ItcSimpleSlider.CLASS_NAME_ITEM_ACTIVE}`;
  static SELECTOR_INDICATOR_ACTIVE = `.${ItcSimpleSlider.CLASS_NAME_INDICATOR_ACTIVE}`;
  static SELECTOR_INDICATORS = `.${ItcSimpleSlider.CLASS_NAME_INDICATORS}`;
  static SELECTOR_WRAPPER = `.${ItcSimpleSlider.PREFIX}__wrapper`;
  static SELECTOR_CONTROL = `.${ItcSimpleSlider.CLASS_NAME_CONTROL}`;
  static SELECTOR_CONTROL_NEXT = `.${ItcSimpleSlider.CLASS_NAME_CONTROL_NEXT}`;
  static SELECTOR_CONTROL_PREV = `.${ItcSimpleSlider.CLASS_NAME_CONTROL_PREV}`;
  static SWIPE_THRESHOLD = 20;
  static TRANSITION_NONE = "transition-none";
  static checkSupportPassiveEvents() {
    let t = !1;
    try {
      const e = Object.defineProperty({}, "passive", {
        get() {
          t = !0;
        },
      });
      window.addEventListener("testPassiveListener", null, e),
        window.removeEventListener("testPassiveListener", null, e);
    } catch (e) {
      t = !1;
    }
    return t;
  }
  constructor(t, e) {
    (this._el = "string" == typeof t ? document.querySelector(t) : t),
      (this._elWrapper = this._el.querySelector(
        ItcSimpleSlider.SELECTOR_WRAPPER
      )),
      (this._elItems = this._el.querySelector(ItcSimpleSlider.SELECTOR_ITEMS)),
      (this._elsItem = this._el.querySelectorAll(
        ItcSimpleSlider.SELECTOR_ITEM
      )),
      (this._currentIndex = 0),
      (this._minOrder = 0),
      (this._maxOrder = 0),
      (this._$itemWithMinOrder = null),
      (this._$itemWithMaxOrder = null),
      (this._minTranslate = 0),
      (this._maxTranslate = 0),
      (this._direction = "next"),
      (this._balancingItemsFlag = !1),
      (this._transform = 0),
      (this._width = this._elWrapper.getBoundingClientRect().width),
      (this._supportResizeObserver = void 0 !== window.ResizeObserver),
      (this._hasSwipeState = !1),
      (this._swipeStartPosX = 0),
      (this._intervalId = null);
    if (
      ((this._config = Object.assign(
        { autoplay: !1, loop: !0, indicators: !0, interval: 5e3, swipe: !0 },
        e
      )),
      (this._elItems.dataset.translate = 0),
      this._elsItem.forEach((t, e) => {
        (t.dataset.order = e), (t.dataset.index = e), (t.dataset.translate = 0);
      }),
      this._config.loop)
    ) {
      const t = this._elsItem.length - 1,
        e = -this._elsItem.length;
      (this._elsItem[t].dataset.order = -1),
        (this._elsItem[t].dataset.translate = -this._elsItem.length);
      const i = e * this._width;
      this._elsItem[t].style.transform = `translateX(${i}px)`;
    }
    this._addIndicators(),
      this._refreshExtremeValues(),
      this._setActiveClass(),
      this._addEventListener(),
      this._autoplay();
  }
  _setActiveClass() {
    const t = this._el.querySelector(ItcSimpleSlider.SELECTOR_ITEM_ACTIVE);
    t && t.classList.remove(ItcSimpleSlider.CLASS_NAME_ITEM_ACTIVE);
    const e = this._el.querySelector(`[data-index="${this._currentIndex}"]`);
    e && e.classList.add(ItcSimpleSlider.CLASS_NAME_ITEM_ACTIVE);
    const i = this._el.querySelector(ItcSimpleSlider.SELECTOR_INDICATOR_ACTIVE);
    i && i.classList.remove(ItcSimpleSlider.CLASS_NAME_INDICATOR_ACTIVE);
    const s = this._el.querySelector(`[data-slide-to="${this._currentIndex}"]`);
    s && s.classList.add(ItcSimpleSlider.CLASS_NAME_INDICATOR_ACTIVE);
    const n = this._el.querySelector(ItcSimpleSlider.SELECTOR_CONTROL_PREV),
      r = this._el.querySelector(ItcSimpleSlider.SELECTOR_CONTROL_NEXT);
    n && n.classList.add(ItcSimpleSlider.CLASS_NAME_CONTROL_SHOW),
      r && r.classList.add(ItcSimpleSlider.CLASS_NAME_CONTROL_SHOW),
      this._config.loop || 0 !== this._currentIndex
        ? this._config.loop ||
          this._currentIndex !== this._elsItem.length - 1 ||
          r.classList.remove(ItcSimpleSlider.CLASS_NAME_CONTROL_SHOW)
        : n.classList.remove(ItcSimpleSlider.CLASS_NAME_CONTROL_SHOW),
      this._el.dispatchEvent(
        new CustomEvent("active.itc.slider", { bubbles: !0 })
      );
  }
  _move(t) {
    let e;
    if (
      (this._elItems.classList.remove(ItcSimpleSlider.TRANSITION_NONE),
      !1 === t && this._elItems.classList.add(ItcSimpleSlider.TRANSITION_NONE),
      "none" === this._direction)
    )
      return (
        (e = this._transform * this._width),
        void (this._elItems.style.transform = `translateX(${e}px)`)
      );
    if (!this._config.loop) {
      if (
        this._currentIndex + 1 >= this._elsItem.length &&
        "next" === this._direction
      )
        return void this._autoplay("stop");
      if (this._currentIndex <= 0 && "prev" === this._direction) return;
    }
    const i = "next" === this._direction ? -1 : 1,
      s = this._transform + i;
    "next" === this._direction
      ? ++this._currentIndex > this._elsItem.length - 1 &&
        (this._currentIndex -= this._elsItem.length)
      : --this._currentIndex < 0 &&
        (this._currentIndex += this._elsItem.length),
      (this._transform = s),
      (this._elItems.dataset.translate = s),
      (e = s * this._width),
      (this._elItems.style.transform = `translateX(${e}px)`),
      this._elItems.dispatchEvent(
        new CustomEvent("transition-start", { bubbles: !0 })
      ),
      this._setActiveClass();
  }
  _moveTo(t, e) {
    const i = this._currentIndex;
    this._direction = t > i ? "next" : "prev";
    for (let s = 0; s < Math.abs(t - i); s++) this._move(e);
  }
  _autoplay(t) {
    if (this._config.autoplay)
      return "stop" === t
        ? (clearInterval(this._intervalId), void (this._intervalId = null))
        : void (
            null === this._intervalId &&
            (this._intervalId = setInterval(() => {
              (this._direction = "next"), this._move();
            }, this._config.interval))
          );
  }
  _addIndicators() {
    if (
      this._el.querySelector(ItcSimpleSlider.SELECTOR_INDICATORS) ||
      !this._config.indicators
    )
      return;
    let t = "";
    for (let e = 0, i = this._elsItem.length; e < i; e++)
      t += `<li class="${ItcSimpleSlider.CLASS_NAME_INDICATOR}" data-slide-to="${e}"></li>`;
    this._el.insertAdjacentHTML(
      "beforeend",
      `<ol class="${ItcSimpleSlider.CLASS_NAME_INDICATORS}">${t}</ol>`
    );
  }
  _refreshExtremeValues() {
    (this._minOrder = parseInt(this._elsItem[0].dataset.order, 10)),
      (this._maxOrder = this._minOrder),
      (this._$itemWithMinOrder = this._elsItem[0]),
      (this._$itemWithMaxOrder = this._$itemWithMinOrder),
      (this._minTranslate = parseInt(this._elsItem[0].dataset.translate, 10)),
      (this._maxTranslate = this._minTranslate);
    for (let t = 0, e = this._elsItem.length; t < e; t++) {
      const e = this._elsItem[t],
        i = parseInt(e.dataset.order, 10);
      i < this._minOrder
        ? ((this._minOrder = i),
          (this._$itemWithMinOrder = e),
          (this._minTranslate = parseInt(e.dataset.translate, 10)))
        : i > this._maxOrder &&
          ((this._maxOrder = i),
          (this._$itemWithMaxOrder = e),
          (this._maxTranslate = parseInt(e.dataset.translate, 10)));
    }
  }
  _balancingItems() {
    if (!this._balancingItemsFlag) return;
    const t = this._elWrapper.getBoundingClientRect(),
      e = t.width / 2,
      i = this._elsItem.length;
    let s, n, r;
    if ("next" === this._direction) {
      const l = t.left,
        a = this._$itemWithMinOrder;
      (s = this._minTranslate),
        (n = a.getBoundingClientRect()),
        n.right < l - e &&
          ((a.dataset.order = this._minOrder + i),
          (s += i),
          (a.dataset.translate = s),
          (r = s * this._width),
          (a.style.transform = `translateX(${r}px)`),
          this._refreshExtremeValues());
    } else if ("prev" === this._direction) {
      const l = t.right,
        a = this._$itemWithMaxOrder;
      (s = this._maxTranslate),
        (n = a.getBoundingClientRect()),
        n.left > l + e &&
          ((a.dataset.order = this._maxOrder - i),
          (s -= i),
          (a.dataset.translate = s),
          (r = s * this._width),
          (a.style.transform = `translateX(${r}px)`),
          this._refreshExtremeValues());
    }
    requestAnimationFrame(this._balancingItems.bind(this));
  }
  _addEventListener() {
    const t = this._elItems;
    function e(t) {
      if (
        (this._autoplay("stop"),
        t.target.closest(`.${ItcSimpleSlider.CLASS_NAME_CONTROL}`))
      )
        return;
      const e = 0 === t.type.search("touch") ? t.touches[0] : t;
      (this._swipeStartPosX = e.clientX),
        (this._swipeStartPosY = e.clientY),
        (this._hasSwipeState = !0),
        (this._hasSwiping = !1);
    }
    function i(t) {
      if (!this._hasSwipeState) return;
      const e = 0 === t.type.search("touch") ? t.touches[0] : t;
      let i = this._swipeStartPosX - e.clientX;
      const s = this._swipeStartPosY - e.clientY;
      if (!this._hasSwiping) {
        if (Math.abs(s) > Math.abs(i) || 0 === Math.abs(i))
          return void (this._hasSwipeState = !1);
        this._hasSwiping = !0;
      }
      if ((t.preventDefault(), !this._config.loop)) {
        const t = this._currentIndex + 1 >= this._elsItem.length && i >= 0,
          e = this._currentIndex <= 0 && i <= 0;
        (t || e) && (i /= 4);
      }
      (this._width = this._elWrapper.getBoundingClientRect().width),
        this._elItems.classList.add(ItcSimpleSlider.TRANSITION_NONE);
      const n = this._transform * this._width - i;
      this._elItems.style.transform = `translateX(${n}px)`;
    }
    function s(t) {
      if (!this._hasSwipeState) return;
      const e = 0 === t.type.search("touch") ? t.changedTouches[0] : t;
      let i = this._swipeStartPosX - e.clientX;
      if (0 === i) return void (this._hasSwipeState = !1);
      if (!this._config.loop) {
        const t = this._currentIndex + 1 >= this._elsItem.length && i >= 0,
          e = this._currentIndex <= 0 && i <= 0;
        (t || e) && (i = 0);
      }
      const s = (i / this._elWrapper.getBoundingClientRect().width) * 100;
      this._elItems.classList.remove(ItcSimpleSlider.TRANSITION_NONE),
        s > ItcSimpleSlider.SWIPE_THRESHOLD
          ? ((this._direction = "next"), this._move())
          : s < -ItcSimpleSlider.SWIPE_THRESHOLD
          ? ((this._direction = "prev"), this._move())
          : ((this._direction = "none"), this._move()),
        (this._hasSwipeState = !1),
        this._config.loop && this._autoplay();
    }
    if (
      (this._el.addEventListener(
        "click",
        function (t) {
          const e = t.target;
          if (
            (this._autoplay("stop"),
            e.classList.contains(ItcSimpleSlider.CLASS_NAME_CONTROL))
          )
            t.preventDefault(),
              (this._direction = e.dataset.slide),
              this._move();
          else if (e.dataset.slideTo) {
            t.preventDefault();
            const i = parseInt(e.dataset.slideTo, 10);
            this._moveTo(i);
          }
          this._config.loop && this._autoplay();
        }.bind(this)
      ),
      this._config.loop &&
        (t.addEventListener(
          "transition-start",
          function () {
            this._balancingItemsFlag ||
              ((this._balancingItemsFlag = !0),
              window.requestAnimationFrame(this._balancingItems.bind(this)));
          }.bind(this)
        ),
        t.addEventListener(
          "transitionend",
          function () {
            (this._balancingItemsFlag = !1),
              this._el.dispatchEvent(
                new CustomEvent("transition-end", { bubbles: !0 })
              );
          }.bind(this)
        )),
      this._config.autoplay &&
        (this._el.addEventListener(
          "mouseenter",
          function () {
            this._autoplay("stop");
          }.bind(this)
        ),
        this._el.addEventListener(
          "mouseleave",
          function () {
            this._config.loop && this._autoplay();
          }.bind(this)
        )),
      this._config.swipe)
    ) {
      const t = !!ItcSimpleSlider.checkSupportPassiveEvents() && {
        passive: !1,
      };
      this._el.addEventListener("touchstart", e.bind(this), t),
        this._el.addEventListener("touchmove", i.bind(this), t),
        this._el.addEventListener("mousedown", e.bind(this)),
        this._el.addEventListener("mousemove", i.bind(this)),
        document.addEventListener("touchend", s.bind(this)),
        document.addEventListener("mouseup", s.bind(this)),
        document.addEventListener("mouseout", s.bind(this));
    }
    if (
      (this._el.addEventListener(
        "dragstart",
        function (t) {
          t.preventDefault();
        }.bind(this)
      ),
      document.addEventListener(
        "visibilitychange",
        function () {
          "hidden" === document.visibilityState
            ? this._autoplay("stop")
            : "visible" === document.visibilityState &&
              this._config.loop &&
              this._autoplay();
        }.bind(this)
      ),
      this._supportResizeObserver)
    ) {
      new ResizeObserver(
        function (t) {
          const e = t[0].contentBoxSize,
            i = t[0].contentRect,
            s = i ? i.width : (e[0] || e).inlineSize;
          let n;
          if (this._width.toFixed(1) === s.toFixed(1)) return;
          this._autoplay("stop"),
            this._elItems.classList.add(ItcSimpleSlider.TRANSITION_NONE),
            (this._width = parseInt(s.toFixed(1), 10)),
            (n = s * parseInt(this._elItems.dataset.translate, 10)),
            (this._elItems.style.transform = `translateX(${n}px)`);
          const r = this._elsItem;
          for (let t = 0; t < r.length; t++)
            (n = parseInt(r[t].dataset.translate, 10) * s),
              (r[t].style.transform = `translateX(${n}px)`);
          this._config.loop && this._autoplay();
        }.bind(this)
      ).observe(this._elWrapper);
    }
  }
  next() {
    (this._direction = "next"), this._move();
  }
  prev() {
    (this._direction = "prev"), this._move();
  }
  autoplay() {
    this._autoplay("stop");
  }
  moveTo(t, e) {
    this._moveTo(t, e);
  }
}
